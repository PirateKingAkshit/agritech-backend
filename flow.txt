📊 Complete Visual Flow Diagrams
Let me show you the complete flow with visual diagrams for every step!

🔐 FLOW 1: Support Login & Dashboard Load
text
┌─────────────────────────────────────────────────────────────┐
│  STEP 1: SUPPORT LOGS IN                                    │
└─────────────────────────────────────────────────────────────┘

Support Agent
    │
    │ Enters phone & password
    ▼
┌─────────────────┐
│  Next.js Login  │
│      Form       │
└────────┬────────┘
         │
         │ [HTTP POST]
         │ /api/v1/users/login
         │ Body: { phone, password }
         ▼
┌─────────────────┐
│  Backend Server │
│  (User Routes)  │
└────────┬────────┘
         │
         │ Validates credentials
         │ Generates JWT token
         ▼
┌─────────────────┐       SUCCESS RESPONSE
│  Response       │ ◄──── { token: "eyJhbG...",
│  to Frontend    │         user: { id, role: "Support" } }
└────────┬────────┘
         │
         │ Store token in localStorage
         ▼
┌─────────────────┐
│  Redirect to    │
│  Dashboard      │
└─────────────────┘


┌─────────────────────────────────────────────────────────────┐
│  STEP 2: LOAD DASHBOARD (Conversations List)               │
└─────────────────────────────────────────────────────────────┘

Dashboard Component Mounts
    │
    ├──────────────────────────────────────────┐
    │                                          │
    ▼                                          ▼
[API CALL]                              [SOCKET CONNECT]
    │                                          │
    │ [HTTP GET]                              │ io.connect()
    │ /api/v1/chat/conversations              │ auth: { token }
    │ Headers: { Authorization: Bearer xxx }   │
    ▼                                          ▼
┌────────────────┐                    ┌────────────────┐
│ Backend        │                    │ Socket.IO      │
│ getConversations│                   │ Server         │
│ Service        │                    │ chatSocket.js  │
└───────┬────────┘                    └───────┬────────┘
        │                                     │
        │ Query DB:                           │ Authenticate token
        │ - Find conversations                │ Set isOnline = true
        │   where assignedSupportId           │ Store socketId
        │   = support's ID                    │
        │ - Populate user details             │
        │ - Sort by updatedAt                 │
        ▼                                     ▼
┌────────────────┐                    ┌────────────────┐
│ RESPONSE       │                    │ CONNECTION     │
│ Conversations  │                    │ ESTABLISHED    │
│ Array + Pagination                  │ Socket ID: abc123
└───────┬────────┘                    └───────┬────────┘
        │                                     │
        │ Display in UI                       │ Emit 'connect' event
        ▼                                     ▼
┌─────────────────────────────────────────────────────────┐
│  DASHBOARD DISPLAYS:                                    │
│  ┌───────────────────────────────────────────────────┐ │
│  │ 🟢 Rajesh Kumar                            [3]    │ │
│  │ "I need help with my crops"                       │ │
│  │ 10:30 AM                                          │ │
│  ├───────────────────────────────────────────────────┤ │
│  │ 🔴 Priya Singh                             [0]    │ │
│  │ "Thank you so much!"                              │ │
│  │ 9:15 AM                                           │ │
│  └───────────────────────────────────────────────────┘ │
└─────────────────────────────────────────────────────────┘
        │
        │ Socket.IO Listeners Active:
        ▼
    [LISTENING FOR EVENTS]
        │
        ├─► notification:new-message (new messages from users)
        ├─► user:online (when users come online)
        └─► user:offline (when users go offline)
💬 FLOW 2: Support Opens a Conversation
text
┌─────────────────────────────────────────────────────────────┐
│  STEP 3: SUPPORT CLICKS ON CONVERSATION                     │
└─────────────────────────────────────────────────────────────┘

Support Clicks "Rajesh Kumar" Conversation
    │
    │ conversationId = "conv123"
    ▼
┌─────────────────┐
│ Navigate to     │
│ Chat Screen     │
└────────┬────────┘
         │
         │ Trigger 3 parallel actions:
         ├────────────────────┬──────────────────────┐
         │                    │                      │
         ▼                    ▼                      ▼
    [API CALL 1]        [API CALL 2]        [SOCKET EVENT 1]
         │                    │                      │
         │ GET                │ GET                  │ emit()
         │ /conversations/:id │ /messages/:convId    │ 'conversation:join'
         ▼                    ▼                      ▼
┌────────────────┐    ┌────────────────┐    ┌────────────────┐
│ Fetch          │    │ Fetch          │    │ Join           │
│ Conversation   │    │ Message        │    │ Conversation   │
│ Details        │    │ History        │    │ Room           │
└───────┬────────┘    └───────┬────────┘    └───────┬────────┘
        │                     │                      │
        │ Returns:            │ Returns:             │ Server adds socket
        │ - User info         │ - Last 50 messages   │ to room "conv123"
        │ - Support info      │ - Pagination info    │
        │ - Status            │ - Sorted by time     │
        │                     │                      │
        ▼                     ▼                      ▼
    [RESPONSE]           [RESPONSE]          [EVENT: conversation:joined]
        │                     │                      │
        └──────────┬──────────┴──────────┬───────────┘
                   │                     │
                   ▼                     ▼
        ┌────────────────────────────────────────┐
        │  DISPLAY CHAT INTERFACE                │
        │  ┌──────────────────────────────────┐  │
        │  │ ← Back   Rajesh Kumar      [🟢] │  │
        │  ├──────────────────────────────────┤  │
        │  │                                  │  │
        │  │ [User] Hello, I need help        │  │
        │  │        10:00 AM              ✓✓  │  │
        │  │                                  │  │
        │  │ [User] [🖼️ crop_disease.jpg]    │  │
        │  │        10:15 AM              ✓✓  │  │
        │  │                                  │  │
        │  │        Thank you! [Support] [Me] │  │
        │  │                  ✓✓ 10:20 AM     │  │
        │  │                                  │  │
        │  ├──────────────────────────────────┤  │
        │  │ [Type message...]  [📎]  [Send]  │  │
        │  └──────────────────────────────────┘  │
        └────────────────────────────────────────┘
                   │
                   │ Immediately after:
                   ▼
        [SOCKET EVENT 2: conversation:mark-all-read]
                   │
                   │ emit({ conversationId: "conv123" })
                   ▼
        ┌────────────────────────────┐
        │ Server Updates:            │
        │ - All unread messages      │
        │   set isRead = true        │
        │ - Unread count = 0         │
        │ - Emit read receipts       │
        └────────────────────────────┘
                   │
                   ▼
        User sees double checkmarks (✓✓) on their messages
📨 FLOW 3: Support Sends a Message
text
┌─────────────────────────────────────────────────────────────┐
│  STEP 4: SUPPORT TYPES AND SENDS MESSAGE                    │
└─────────────────────────────────────────────────────────────┘

Support Types in TextField
    │
    │ onChange event
    ▼
┌─────────────────┐
│ Detect Typing   │
└────────┬────────┘
         │
         │ [SOCKET EMIT]
         │ 'typing:start'
         │ { conversationId: "conv123" }
         ▼
┌─────────────────┐
│ Server          │ ──────► Broadcast to User
│ chatSocket.js   │         'typing:user-typing'
└────────┬────────┘         { userName: "Support Agent" }
         │
         ▼
User sees: "Support Agent is typing..." 💬


Support Clicks Send Button
    │
    │ messageText = "How can I help you?"
    ▼
┌─────────────────┐
│ Validate Input  │
│ (not empty)     │
└────────┬────────┘
         │
         │ [SOCKET EMIT]
         │ 'message:send'
         │ {
         │   conversationId: "conv123",
         │   messageType: "text",
         │   content: "How can I help you?"
         │ }
         ▼
┌───────────────────────────────────────────────────────────┐
│  SERVER: chatSocket.js - 'message:send' Handler           │
└───────────────────────────────────────────────────────────┘
         │
         ├─► Step 1: Validate conversation exists
         │           User is participant ✓
         │
         ├─► Step 2: Create message in database
         │           Message.create({
         │             conversationId,
         │             senderId: support's ID,
         │             messageType: "text",
         │             content: "How can I help you?"
         │           })
         │
         ├─► Step 3: Update Conversation
         │           - lastMessage = new message ID
         │           - unreadCount[userId] += 1
         │           - status = "open"
         │
         └─► Step 4: Broadcast to multiple targets
                     │
         ┌───────────┼───────────┬───────────────┐
         │           │           │               │
         ▼           ▼           ▼               ▼
    [TARGET 1]  [TARGET 2]  [TARGET 3]     [TARGET 4]
         │           │           │               │
    To Support  To Conv Room To User's     Update DB
    (sender)    (both users)  Room          Complete
         │           │           │               │
    'message:sent' 'message:new' 'notification:  │
         │           │          new-message'      │
         │           │           │               │
         ▼           ▼           ▼               ▼
┌──────────┐  ┌──────────┐  ┌──────────┐  ┌──────────┐
│ Support  │  │ Both     │  │ User     │  │ Conversation│
│ sees ✓   │  │ see      │  │ gets     │  │ updated in  │
│          │  │ message  │  │ notif    │  │ database    │
└──────────┘  └──────────┘  └──────────┘  └──────────┘
    │              │              │
    │              │              │
    ▼              ▼              ▼
┌──────────────────────────────────────────────────────┐
│ IMMEDIATE UI UPDATES (Real-Time)                    │
├──────────────────────────────────────────────────────┤
│ Support's Screen:                                    │
│   - Message added to chat ✓                         │
│   - Checkmark shows "sent"                           │
│   - Input cleared                                    │
│                                                      │
│ User's Screen (if online):                          │
│   - Message appears instantly                        │
│   - Notification sound plays 🔔                      │
│   - Badge shows unread count                         │
│   - Single checkmark (delivered ✓)                  │
│                                                      │
│ If User Reads:                                       │
│   - User emits 'message:read'                       │
│   - Support sees double checkmark (✓✓)              │
└──────────────────────────────────────────────────────┘
📸 FLOW 4: Support Sends Media (Image/Video/Audio)
text
┌─────────────────────────────────────────────────────────────┐
│  STEP 5: SUPPORT SENDS IMAGE/VIDEO/AUDIO                    │
└─────────────────────────────────────────────────────────────┘

Support Clicks Attach Button 📎
    │
    │ Opens file picker
    ▼
┌─────────────────┐
│ User Selects    │
│ Image File      │
│ crop_issue.jpg  │
└────────┬────────┘
         │
         │ PHASE 1: Upload Media First
         ▼
┌─────────────────┐
│ Create FormData │
│ - file: crop.jpg│
│ - type: "image" │
└────────┬────────┘
         │
         │ [HTTP POST]
         │ /api/v1/chat/media
         │ Content-Type: multipart/form-data
         │ Headers: { Authorization: Bearer xxx }
         ▼
┌────────────────────────────────────────────────────────┐
│ SERVER: uploadChatMedia Controller                    │
├────────────────────────────────────────────────────────┤
│ 1. Multer saves file to uploads/chat/                 │
│    → uploads/chat/crop_issue-1234.jpg                 │
│                                                        │
│ 2. Create MediaMaster document:                       │
│    {                                                   │
│      name: "crop_issue.jpg",                          │
│      type: "image",                                   │
│      url: "http://localhost:5000/uploads/chat/...",  │
│      format: "image/jpeg",                            │
│      size: 234567                                     │
│    }                                                   │
│                                                        │
│ 3. Return media ID                                    │
└────────────────┬───────────────────────────────────────┘
                 │
                 │ RESPONSE:
                 │ { data: [{ _id: "media123", url: "..." }] }
                 ▼
┌─────────────────┐
│ Frontend Gets   │
│ mediaId         │
│ = "media123"    │
└────────┬────────┘
         │
         │ PHASE 2: Send Message with Media ID
         ▼
┌─────────────────┐
│ [SOCKET EMIT]   │
│ 'message:send'  │
│ {               │
│   conversationId│
│   messageType:  │
│     "image",    │
│   mediaId:      │
│     "media123"  │
│ }               │
└────────┬────────┘
         │
         ▼
┌────────────────────────────────────────────────────────┐
│ SERVER: chatSocket.js - 'message:send' Handler        │
├────────────────────────────────────────────────────────┤
│ 1. Verify media exists (mediaId = "media123") ✓       │
│                                                        │
│ 2. Create Message:                                    │
│    {                                                   │
│      messageType: "image",                            │
│      mediaId: "media123"  (reference to MediaMaster) │
│    }                                                   │
│                                                        │
│ 3. Populate media details when broadcasting:          │
│    message.populate('mediaId')                        │
│    → Includes full URL, size, format                  │
│                                                        │
│ 4. Broadcast 'message:new' with populated media       │
└────────────────┬───────────────────────────────────────┘
                 │
                 ▼
┌────────────────────────────────────────────────────────┐
│ BOTH SCREENS UPDATE:                                  │
├────────────────────────────────────────────────────────┤
│ Message structure received:                           │
│ {                                                      │
│   "_id": "msg456",                                    │
│   "messageType": "image",                             │
│   "mediaId": {                                        │
│     "_id": "media123",                                │
│     "url": "http://localhost:5000/uploads/chat/..."  │
│     "name": "crop_issue.jpg"                          │
│   },                                                   │
│   "createdAt": "..."                                  │
│ }                                                      │
│                                                        │
│ Frontend renders:                                     │
│   <img src={message.mediaId.url} />                   │
│                                                        │
│ User sees image instantly! 🖼️                         │
└────────────────────────────────────────────────────────┘
📬 FLOW 5: User Sends Message (Support Receives)
text
┌─────────────────────────────────────────────────────────────┐
│  STEP 6: USER SENDS MESSAGE → SUPPORT RECEIVES             │
└─────────────────────────────────────────────────────────────┘

User (Rajesh) Types Message on Flutter App
    │
    │ "Can you help me with fertilizer?"
    ▼
User Clicks Send
    │
    │ [SOCKET EMIT from Flutter]
    │ socket.emit('message:send', {
    │   conversationId: "conv123",
    │   messageType: "text",
    │   content: "Can you help me with fertilizer?"
    │ })
    ▼
┌────────────────────────────────────────────────────────┐
│ SERVER Receives & Processes                           │
├────────────────────────────────────────────────────────┤
│ Same flow as when Support sends                       │
│ (see FLOW 3 above)                                    │
└────────────────┬───────────────────────────────────────┘
                 │
                 │ Server broadcasts to:
                 │
         ┌───────┴───────┬───────────────┐
         │               │               │
         ▼               ▼               ▼
    To User         To Conv Room    To Support's
    (sender)        (both users)    Personal Room
         │               │               │
    'message:sent'  'message:new'  'notification:
         │               │          new-message'
         ▼               ▼               ▼
┌──────────────────────────────────────────────────────┐
│ SUPPORT'S SCREEN UPDATES INSTANTLY:                  │
├──────────────────────────────────────────────────────┤
│                                                      │
│ IF Support is IN the conversation (room joined):    │
│ ────────────────────────────────────────────────     │
│ socket.on('message:new') fires                      │
│   ↓                                                  │
│   Message added to chat UI                          │
│   ↓                                                  │
│   Auto-scroll to bottom                             │
│   ↓                                                  │
│   Auto emit 'message:read' (mark as read)           │
│                                                      │
│ Chat shows:                                          │
│ ┌────────────────────────────────────────┐          │
│ │ [User] Can you help me with            │          │
│ │        fertilizer?                     │          │
│ │        10:40 AM                    ✓✓  │          │
│ └────────────────────────────────────────┘          │
│                                                      │
│                                                      │
│ IF Support is NOT in the conversation:              │
│ ─────────────────────────────────────────           │
│ socket.on('notification:new-message') fires         │
│   ↓                                                  │
│   Show browser notification 🔔                       │
│     "New message from Rajesh Kumar"                  │
│   ↓                                                  │
│   Update conversation list                           │
│     - Move to top                                   │
│     - Increase unread badge [1]                     │
│     - Update last message preview                   │
│   ↓                                                  │
│   Play notification sound                           │
│                                                      │
│ Dashboard shows:                                     │
│ ┌────────────────────────────────────────┐          │
│ │ 🟢 Rajesh Kumar               [1] ◄NEW │          │
│ │ "Can you help me with..."              │          │
│ │ 10:40 AM                               │          │
│ └────────────────────────────────────────┘          │
└──────────────────────────────────────────────────────┘
🔄 FLOW 6: Real-Time Status Updates
text
┌─────────────────────────────────────────────────────────────┐
│  ONGOING: REAL-TIME STATUS UPDATES                          │
└─────────────────────────────────────────────────────────────┘

User Goes Online/Offline
    │
    ▼
┌──────────────────────────────────────────┐
│ User Opens App (Connects to Socket.IO)  │
└────────────────┬─────────────────────────┘
                 │
                 │ Server detects connection
                 │ Updates User.isOnline = true
                 ▼
        ┌────────────────┐
        │ Server Emits:  │
        │ io.emit(       │
        │   'user:online'│
        │   { userId }   │
        │ )              │
        └────────┬───────┘
                 │
                 │ Broadcast to ALL connected clients
                 ▼
┌──────────────────────────────────────────────────────┐
│ Support's Screen Listens:                           │
│ socket.on('user:online', (data) => {                │
│   if (data.userId === currentConversationUserId) {  │
│     updateStatus("Online 🟢")                       │
│   }                                                  │
│ })                                                   │
│                                                      │
│ Display Updates:                                    │
│ ┌──────────────────────────────────────┐            │
│ │ ← Back   Rajesh Kumar      [🟢]      │            │
│ │          Online now                  │            │
│ └──────────────────────────────────────┘            │
└──────────────────────────────────────────────────────┘


User Closes App (Disconnects)
    │
    ▼
┌──────────────────────────────────────────┐
│ Socket 'disconnect' event fires          │
└────────────────┬─────────────────────────┘
                 │
                 │ Server updates:
                 │ User.isOnline = false
                 │ User.lastSeen = now
                 ▼
        ┌────────────────┐
        │ Server Emits:  │
        │ io.emit(       │
        │  'user:offline'│
        │  { userId,     │
        │    lastSeen }  │
        │ )              │
        └────────┬───────┘
                 │
                 ▼
┌──────────────────────────────────────────────────────┐
│ Support's Screen Updates:                           │
│ socket.on('user:offline', (data) => {               │
│   updateStatus(`Last seen ${formatTime(lastSeen)}`) │
│ })                                                   │
│                                                      │
│ Display Updates:                                    │
│ ┌──────────────────────────────────────┐            │
│ │ ← Back   Rajesh Kumar      [🔴]      │            │
│ │          Last seen 2 mins ago        │            │
│ └──────────────────────────────────────┘            │
└──────────────────────────────────────────────────────┘


Typing Indicators (Real-Time)
    │
    ▼
┌─────────────────────────────────────────┐
│ User Types in TextField                 │
└────────────┬────────────────────────────┘
             │
             │ socket.emit('typing:start')
             ▼
┌─────────────────────────────────────────┐
│ Support Sees Instantly:                 │
│ "Rajesh Kumar is typing..." 💬          │
└─────────────────────────────────────────┘
             │
             │ 2 seconds of no typing
             ▼
             socket.emit('typing:stop')
             ↓
┌─────────────────────────────────────────┐
│ Typing indicator disappears             │
└─────────────────────────────────────────┘
🔚 FLOW 7: Support Closes Chat & Logs Out
text
┌─────────────────────────────────────────────────────────────┐
│  STEP 7: CLEANUP & LOGOUT                                   │
└─────────────────────────────────────────────────────────────┘

Support Closes Conversation
    │
    │ Clicks "Back" button
    ▼
┌─────────────────┐
│ Cleanup Handler │
│ (useEffect)     │
└────────┬────────┘
         │
         │ [SOCKET EMIT]
         │ 'conversation:leave'
         │ { conversationId: "conv123" }
         ▼
┌─────────────────┐
│ Server Removes  │
│ socket from     │
│ room "conv123"  │
└────────┬────────┘
         │
         ▼
Support no longer receives 'message:new' for this conversation
         │
         │ Navigate back to dashboard
         ▼
Dashboard shows conversation list again


Support Logs Out
    │
    │ Clicks "Logout" button
    ▼
┌─────────────────┐
│ Disconnect      │
│ Socket.IO       │
└────────┬────────┘
         │
         │ socket.disconnect()
         ▼
┌────────────────────────────────────────────┐
│ Server 'disconnect' Event Fires            │
├────────────────────────────────────────────┤
│ 1. Remove from connectedUsers Map          │
│ 2. Update User.isOnline = false           │
│ 3. Update User.lastSeen = now             │
│ 4. Emit 'user:offline' to all clients     │
└────────────────┬───────────────────────────┘
                 │
                 ▼
┌─────────────────┐
│ Clear Token     │
│ localStorage.   │
│ removeItem(     │
│   'token'       │
│ )               │
└────────┬────────┘
         │
         ▼
┌─────────────────┐
│ Redirect to     │
│ Login Page      │
└─────────────────┘